module RBS
  class TypeName
    type kind = :class | :alias | :interface

    %a{rbs:test:skip}
    attr_reader namespace: Namespace

    %a{rbs:test:skip}
    attr_reader name: Symbol

    %a{rbs:test:skip}
    attr_reader kind: kind

    def initialize: (namespace: Namespace, name: Symbol) -> void

    %a{rbs:test:skip}
    def ==: (untyped other) -> bool

    %a{rbs:test:skip}
    def hash: () -> Integer

    %a{rbs:test:skip}
    def to_s: () -> ::String

    def to_json: (*untyped a) -> untyped

    def to_namespace: () -> Namespace

    %a{rbs:test:skip}
    def class?: () -> bool

    def alias?: () -> bool

    def absolute!: () -> TypeName

    def absolute?: () -> bool

    def relative!: () -> TypeName

    def interface?: () -> bool

    def with_prefix: (Namespace namespace) -> TypeName
  end
end
